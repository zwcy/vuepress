(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{401:function(a,e,r){"use strict";r.r(e);var s=r(17),t=Object(s.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("p",[a._v("在Dockerfile中用到的命令有")]),a._v(" "),r("h5",{attrs:{id:"from"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#from","aria-hidden":"true"}},[a._v("#")]),a._v(" FROM")]),a._v(" "),r("p",[a._v("​    FROM指定一个基础镜像， 一般情况下一个可用的 Dockerfile一定是 FROM 为第一个指令。至于image则可以是任何合理存在的image镜像。\n​    FROM 一定是首个非注释指令 Dockerfile.\n​    FROM 可以在一个 Dockerfile 中出现多次，以便于创建混合的images。\n​    如果没有指定 tag ，latest 将会被指定为要使用的基础镜像版本。")]),a._v(" "),r("h5",{attrs:{id:"maintainer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#maintainer","aria-hidden":"true"}},[a._v("#")]),a._v(" MAINTAINER")]),a._v(" "),r("p",[a._v("​    这里是用于指定镜像制作者的信息")]),a._v(" "),r("h5",{attrs:{id:"run"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#run","aria-hidden":"true"}},[a._v("#")]),a._v(" RUN")]),a._v(" "),r("p",[a._v("​    RUN命令将在当前image中执行任意合法命令并提交执行结果。命令执行提交后，就会自动执行Dockerfile中的下一个指令。\n​    层级 RUN 指令和生成提交是符合Docker核心理念的做法。它允许像版本控制那样，在任意一个点，对image 镜像进行定制化构建。\n​    RUN 指令缓存不会在下个命令执行时自动失效。比如 RUN apt-get dist-upgrade -y 的缓存就可能被用于下一个指令. --no-cache 标志可以被用于强制取消缓存使用。")]),a._v(" "),r("h5",{attrs:{id:"env"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#env","aria-hidden":"true"}},[a._v("#")]),a._v(" ENV")]),a._v(" "),r("p",[a._v("​    ENV指令可以用于为docker容器设置环境变量\n​    ENV设置的环境变量，可以使用 docker inspect命令来查看。同时还可以使用docker run --env "),r("code",[a._v("key")]),a._v("="),r("code",[a._v("value")]),a._v("来修改环境变量。")]),a._v(" "),r("h5",{attrs:{id:"user"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#user","aria-hidden":"true"}},[a._v("#")]),a._v(" USER")]),a._v(" "),r("p",[a._v("​    USER 用来切换运行属主身份的。Docker 默认是使用 root，但若不需要，建议切换使用者身分，毕竟 root 权限太大了，使用上有安全的风险。")]),a._v(" "),r("h5",{attrs:{id:"workdir"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#workdir","aria-hidden":"true"}},[a._v("#")]),a._v(" WORKDIR")]),a._v(" "),r("p",[a._v("​    WORKDIR 用来切换工作目录的。Docker 默认的工作目录是/，只有 RUN 能执行 cd 命令切换目录，而且还只作用在当下下的 RUN，也就是说每一个 RUN 都是独立进行的。如果想让其他指令在指定的目录下执行，就得靠 WORKDIR。WORKDIR 动作的目录改变是持久的，不用每个指令前都使用一次 WORKDIR。")]),a._v(" "),r("h5",{attrs:{id:"copy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#copy","aria-hidden":"true"}},[a._v("#")]),a._v(" COPY")]),a._v(" "),r("p",[a._v("​    COPY 将文件从路径 "),r("code",[a._v("src")]),a._v(" 复制添加到容器内部路径 "),r("code",[a._v("dest")]),a._v("。\n​    "),r("code",[a._v("src")]),a._v(" 必须是想对于源文件夹的一个文件或目录，也可以是一个远程的url，"),r("code",[a._v("dest")]),a._v(" 是目标容器中的绝对路径。\n​    所有的新文件和文件夹都会创建UID 和 GID 。事实上如果 "),r("code",[a._v("src")]),a._v(" 是一个远程文件URL，那么目标文件的权限将会是600。")]),a._v(" "),r("h5",{attrs:{id:"add"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#add","aria-hidden":"true"}},[a._v("#")]),a._v(" ADD")]),a._v(" "),r("p",[a._v("​    ADD 将文件从路径 "),r("code",[a._v("src")]),a._v(" 复制添加到容器内部路径 "),r("code",[a._v("dest")]),a._v("。\n​    "),r("code",[a._v("src")]),a._v(" 必须是想对于源文件夹的一个文件或目录，也可以是一个远程的url。"),r("code",[a._v("dest")]),a._v(" 是目标容器中的绝对路径。\n​    所有的新文件和文件夹都会创建UID 和 GID。事实上如果 "),r("code",[a._v("src")]),a._v(" 是一个远程文件URL，那么目标文件的权限将会是600。")]),a._v(" "),r("h5",{attrs:{id:"volume"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#volume","aria-hidden":"true"}},[a._v("#")]),a._v(" VOLUME")]),a._v(" "),r("p",[a._v("​    创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。")]),a._v(" "),r("h5",{attrs:{id:"expose"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#expose","aria-hidden":"true"}},[a._v("#")]),a._v(" EXPOSE")]),a._v(" "),r("p",[a._v("​    EXPOSE 指令指定在docker允许时指定的端口进行转发。")]),a._v(" "),r("h5",{attrs:{id:"cmd"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cmd","aria-hidden":"true"}},[a._v("#")]),a._v(" CMD")]),a._v(" "),r("p",[a._v("​    Dockerfile.中只能有一个CMD指令。 如果你指定了多个，那么最后个CMD指令是生效的。\n​    CMD指令的主要作用是提供默认的执行容器。这些默认值可以包括可执行文件，也可以省略可执行文件。\n​    当你使用shell或exec格式时，  CMD 会自动执行这个命令。")]),a._v(" "),r("h5",{attrs:{id:"onbuild"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#onbuild","aria-hidden":"true"}},[a._v("#")]),a._v(" ONBUILD")]),a._v(" "),r("p",[a._v("​    ONBUILD 的作用就是让指令延迟執行，延迟到下一个使用 FROM 的 Dockerfile 在建立 image 时执行，只限延迟一次。\n​    ONBUILD 的使用情景是在建立镜像时取得最新的源码 (搭配 RUN) 与限定系统框架。")]),a._v(" "),r("h5",{attrs:{id:"arg"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#arg","aria-hidden":"true"}},[a._v("#")]),a._v(" ARG")]),a._v(" "),r("p",[a._v("​    ARG是Docker1.9 版本才新加入的指令。\n​    ARG 定义的变量只在建立 image 时有效，建立完成后变量就失效消失")]),a._v(" "),r("h5",{attrs:{id:"label"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#label","aria-hidden":"true"}},[a._v("#")]),a._v(" LABEL")]),a._v(" "),r("p",[a._v("​    定义一个 image 标签 Owner，并赋值，其值为变量 Name 的值。(LABEL Owner=$Name )")]),a._v(" "),r("h5",{attrs:{id:"entrypoint"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint","aria-hidden":"true"}},[a._v("#")]),a._v(" ENTRYPOINT")]),a._v(" "),r("p",[a._v("​    是指定 Docker image 运行成 instance (也就是 Docker container) 时，要执行的命令或者文件。\n​")]),a._v(" "),r("p",[a._v("我自己的Dockerfile文件内容如下：")]),a._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('FROM docker.io/centos\nMAINTAINER The CentOS Test Images - test\nRUN mkdir -p /usr/app\nRUN ls\nRUN pwd\nCOPY /jdk /usr/app/jdk/\nADD tomcat/ /usr/app/tomcat/\nADD hadoop/ /usr/app/hadoop/\nENV JAVA_HOME /usr/app/jdk\nENV PATH $JAVA_HOME/bin:$PATH\n#ADD /soft/jdk /\n#ADD /soft/tomcat /\n#ADD /soft/hadoop /\n# Volumes for systemd\n# VOLUME ["/run", "/tmp"]\n# Environment for systemd\n# ENV container=docker\n# For systemd usage this changes to /usr/sbin/init\n# Keeping it as /bin/bash for compatibility with previous\n#CMD ["/bin/bash"]\n')])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br"),r("span",{staticClass:"line-number"},[a._v("8")]),r("br"),r("span",{staticClass:"line-number"},[a._v("9")]),r("br"),r("span",{staticClass:"line-number"},[a._v("10")]),r("br"),r("span",{staticClass:"line-number"},[a._v("11")]),r("br"),r("span",{staticClass:"line-number"},[a._v("12")]),r("br"),r("span",{staticClass:"line-number"},[a._v("13")]),r("br"),r("span",{staticClass:"line-number"},[a._v("14")]),r("br"),r("span",{staticClass:"line-number"},[a._v("15")]),r("br"),r("span",{staticClass:"line-number"},[a._v("16")]),r("br"),r("span",{staticClass:"line-number"},[a._v("17")]),r("br"),r("span",{staticClass:"line-number"},[a._v("18")]),r("br"),r("span",{staticClass:"line-number"},[a._v("19")]),r("br"),r("span",{staticClass:"line-number"},[a._v("20")]),r("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);