(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{309:function(a,t,e){"use strict";e.r(t);var r=e(17),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"sidecar模式：下一代微服务架构的关键"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sidecar模式：下一代微服务架构的关键","aria-hidden":"true"}},[a._v("#")]),a._v(" Sidecar模式：下一代微服务架构的关键")]),a._v(" "),e("h2",{attrs:{id:"什么是sidecar模式？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是sidecar模式？","aria-hidden":"true"}},[a._v("#")]),a._v(" 什么是Sidecar模式？")]),a._v(" "),e("p",[a._v("Sidecar模式是一种将应用功能从应用本身剥离出来作为单独进程的方式。该模式允许我们向应用无侵入添加多种功能，避免了为满足第三方组件需求而向应用添加额外的配置代码。")]),a._v(" "),e("p",[a._v("就像边车加装在摩托车上一样，在软件架构中，sidecar附加到主应用，或者叫父应用上，以扩展/增强功能特性，同时Sidecar与主应用是松耦合的。")]),a._v(" "),e("p",[a._v("举个例子，假设现在有6个相互通信的微服务，每个微服务都需要具有可观察性、监控、日志记录、配置、断路器等功能，而所有这些功能都是在微服务中使用一些第三方库实现的。")]),a._v(" "),e("p",[a._v("这样一组服务的实际情况可能会非常复杂，增加了应用的整体复杂性，尤其是当每个微服务用不同的语言编写、使用不同的基于.net、Java、Python等语言的第三方库")])])}),[],!1,null,null,null);t.default=s.exports}}]);