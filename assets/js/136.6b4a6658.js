(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{430:function(a,t,r){"use strict";r.r(t);var e=r(17),s=Object(e.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h3",{attrs:{id:"口决"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#口决","aria-hidden":"true"}},[a._v("#")]),a._v(" 口决")]),a._v(" "),r("ul",[r("li",[a._v("虚箭实现实泛化")]),a._v(" "),r("li",[a._v("虚线依赖实关联")]),a._v(" "),r("li",[a._v("空菱聚合实组合")])]),a._v(" "),r("h4",{attrs:{id:"泛化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#泛化","aria-hidden":"true"}},[a._v("#")]),a._v(" 泛化")]),a._v(" "),r("p",[a._v("用一条带空心箭头的直接表示，通常在程序里面泛化表现为继承于非抽象类。")]),a._v(" "),r("h4",{attrs:{id:"实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实现","aria-hidden":"true"}},[a._v("#")]),a._v(" 实现")]),a._v(" "),r("p",[a._v("用一条带实心箭头的虚线表示。通常程序里面实现关系表现为继承抽象类,或接口。")]),a._v(" "),r("h4",{attrs:{id:"聚合"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#聚合","aria-hidden":"true"}},[a._v("#")]),a._v(" 聚合")]),a._v(" "),r("p",[a._v("用一条带空心菱形箭头的直线表示。与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在。")]),a._v(" "),r("h4",{attrs:{id:"组合"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#组合","aria-hidden":"true"}},[a._v("#")]),a._v(" 组合")]),a._v(" "),r("p",[a._v("用一条带实心菱形箭头直线表示，如果整体不存在了，部分也不复存在")]),a._v(" "),r("h4",{attrs:{id:"依赖"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#依赖","aria-hidden":"true"}},[a._v("#")]),a._v(" 依赖")]),a._v(" "),r("p",[a._v("用一套带箭头的虚线表示，描述一个对象在运行期间会用到另一个对象的关系。通常在程序里面通过构造函数、形参等体现。")]),a._v(" "),r("h4",{attrs:{id:"关联"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关联","aria-hidden":"true"}},[a._v("#")]),a._v(" 关联")]),a._v(" "),r("p",[a._v("用一条直线表示，当然如果需要标明方向可以添加箭头，通常不会随着状态的变化而变化。通常在程序里面以类变量的方式表现。")])])}),[],!1,null,null,null);t.default=s.exports}}]);